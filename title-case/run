#!/usr/bin/env bash

function timeIt() {
  msg=$1; shift
  echo -e "$msg\n"
  /usr/bin/time -l "$@" <input.txt >/dev/null
  echo
}

#timeIt "Python 1" python title1.py
#timeIt "Python 2" python title2.py
#timeIt "Perl" perl -pe 's/(\w+)/\u$1/g'
#timeIt "Node" node title.js
#timeIt "Go" bin/title
#timeIt "C script" bin/script
#timeIt "C capitalise" bin/capitalise
timeIt "C capitalise-goto" bin/capitalise-goto

#timeIt "Haskell String"            bin/normal
#timeIt "Haskell Text"              bin/text
#timeIt "Haskell Text Lazy"         bin/text-lazy
#timeIt "Haskell Text Lazy Builder" bin/text-lazy
#timeIt "Haskell ByteString"        bin/byte-string
#timeIt "Haskell ByteString Lazy"   bin/byte-string-lazy

#timeIt "Haskell Scan Text"         bin/scan-text
#timeIt "Haskell Scan Text Lazy"    bin/scan-text-lazy
#timeIt "Haskell Scan ByteString"   bin/scan-byte-string
#timeIt "Haskell Scan ByteString 2" bin/scan-byte-string-2
timeIt "Haskell Scan ByteString 3" bin/scan-byte-string-3
# This does not complete. Probably a bug.
#timeIt "Haskell One Liner ByteString Lazy" bin/one-liner-byte-string-lazy

#timeIt "Haskell MapAccum ByteString"           bin/map-accum-byte-string
timeIt "Haskell MapAccum ByteString 2"         bin/map-accum-byte-string-2
timeIt "Haskell MapAccum ByteString Lazy"      bin/map-accum-byte-string-lazy
timeIt "Haskell MapAccum ByteString Lazy Char" bin/map-accum-byte-string-lazy-char

#timeIt "Haskell ByteString Lazy Builder 1" bin/byte-string-lazy-builder-1
#timeIt "Haskell ByteString Lazy Builder 2" bin/byte-string-lazy-builder-2
#timeIt "Haskell ByteString Lazy Builder 3" bin/byte-string-lazy-builder-3
#timeIt "Haskell ByteString Lazy Builder 4" bin/byte-string-lazy-builder-4

#timeIt "Haskell Conduit ByteString" bin/conduit-byte-string
#timeIt "Haskell Conduit Text" bin/conduit-text
